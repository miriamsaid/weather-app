{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","x","timezone","className","main","moment","utc","utcOffset","format","unix","sys","sunset","sunrise","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","onClick","name","country","src","icon","alt","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c7bfd16.chunk.js","sourcesContent":["import moment from 'moment'\nimport 'moment-timezone';\nimport React, { useState } from 'react';\nimport './App.css';\n\nconst api = { // API Key\n  key: \"cf1a610a47c7a1e0c56e3391803c790f\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() { // function to fetch weather data\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search1 = evt => {\n    if (evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=meet&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => \n        setWeather(result));\n        setQuery('');\n        console.log(weather);\n    }\n  }\n  const search2 = evt => {\n      fetch(`${api.base}weather?q=${query}&units=meet&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => \n        setWeather(result));\n        setQuery('');\n        console.log(weather);\n  }\n\nlet x = (weather.timezone)/3600; // defining x as the timeezone for each country, +-GMT\n\n  return (\n    <div className=\n    {(typeof weather.main !='undefined') // if the weather data is yet to be fetched, the 'App' class will be returned\n    ? (moment.utc().utcOffset(x).format('H') >= moment.unix(weather.sys.sunset).utcOffset(x).format('H') // if current time H is greater than the sunset timestanp\n    && (moment.utc().utcOffset(x).format('H') <= moment.unix(weather.sys.sunrise).utcOffset(x).format('H')) // less than the sunrise time stamp, the 'App night' class will be returned\n    ? 'App night' : 'App'): 'App'}> \n      <main className= \"d-flex align-content-center\">\n       <div className=\"wrap2\">\n        <div className= \" wrap search-box\">\n          <input\n           type=\"text\"\n           className=\"search-bar\"\n           placeholder=\"type in a city . . .\"\n           onChange= {e => setQuery(e.target.value)}\n           value={query}\n           onKeyPress={search1}>\n          </input>\n          <button onClick={search2} >Search</button>\n        </div>\n\n    {/* the below section will be hidden untill user input is used */}\n\n    {(typeof weather.main != \"undefined\") ? (\n      <div className = \"flex-box justify-content-center\">\n        <div className=\"card2 flex-box justify-content-center\">\n          <div className= \"location\">{weather.name}, {weather.sys.country}</div>\n          <div className= \"date\">{moment.utc().utcOffset(x).format('ddd MMMM Do, YYYY HH:mm')}</div>\n          <div className=\"description\">{weather.weather[0].main}</div>\n          <div className = \"row weather-box\">\n          <div className= \"col-sm\"><img \n          src = {\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/162656/\" + weather.weather[0].icon + \".svg\"}\n          alt=\"weather\"\n          className= \"icon\"\n          ></img></div>           \n          <div className= \"col-sm\">\n          <div className=  \n          {\n            (moment.utc().utcOffset(x).format('H') >= moment.unix(weather.sys.sunset).utcOffset(x).format('H') // same if statement as above to determine which class to use depending on time\n            && (moment.utc().utcOffset(x).format('H') <= moment.unix(weather.sys.sunrise).utcOffset(x).format('H'))  \n            ? 'temp night' : 'temp')\n          }\n          >{Math.round(weather.main.temp)-273}Â°c\n          </div>\n          </div>\n          </div>\n          <div className=\"sunsetSunrise\">\n            {\n              (((moment.utc().utcOffset(x).format('H') <= moment.unix(weather.sys.sunset).utcOffset(x).format('H')) // same if statement as above to determine which class to use depending on time\n              && (moment.utc().utcOffset(x).format('H') <= moment.unix(weather.sys.sunrise).utcOffset(x).format('H'))\n              ? ['Sunset at ', moment.unix(weather.sys.sunset).utcOffset(x).format('H:mm a')]\n              : ['Sunrise at ', moment.unix(weather.sys.sunrise).utcOffset(x).format('H:mm a')])\n            )} \n          </div>\n        </div>\n        </div>\n    ) : ('')}\n\n       </div>\n      </main>\n     <footer className=\"mt-auto py-2  text-center\"><small>- Coded by Miriam Said -</small></footer>\n    </div>\n  );\n}\n\nexport default App;\n\n \n//errors and improvements\n\n// multiple sunrise and sunset unix timestamps recieved by openweathermap API\n// are incorrect and therefore the page theme and the sunrise/sunset description is also incorrect\n// consider using a different API or further troubleshooting the issue to check if their are errors\n// within the code or use another function to determine theme and sunrise/sunset description.","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}